{
    "udev": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        }
    ],
    "blkid": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        }
    ],
    "aio": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        },
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_BLUESTORE",
            "option_code": "option(WITH_BLUESTORE \"Bluestore OSD backend\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "libcryptsetup": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "nl": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "CAPNG": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_LIBCEPHFS",
            "option_code": "option(WITH_LIBCEPHFS \"libcephfs client library\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "verbs": [
        {
            "option_name": "WITH_RDMA",
            "option_code": "option(WITH_RDMA \"Enable RDMA in async messenger\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c lvol env_dpdk sock nvmf bdev nvme conf thread trace notify accel event_accel blob vmd event_vmd event_bdev sock_posix event_sock event rpc jsonrpc json util log)...MASKED_CONTENT...",
            "reachability": "['WITH_SPDK']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(c \"python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python\"']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(Boost_${c}_FOUND \"TRUE\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {
                "WITH_DPDK": {
                    "new_option_name": "WITH_DPDK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {
                "WITH_DPDK": {
                    "new_option_name": "WITH_DPDK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {
                "WITH_SEASTAR": {
                    "new_option_name": "WITH_SEASTAR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "indirect_options": {
                "WITH_SEASTAR": {
                    "new_option_name": "WITH_SEASTAR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${components})...MASKED_CONTENT...",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "DPDK_rte_${c}_LIBRARY",
            "option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
            "reachability": "['TARGET ${dpdk_lib}']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
            "reachability": "['TARGET ${dpdk_lib}']",
            "indirect_options": {}
        },
        {
            "option_name": "DPDK_rte_${c}_LIBRARY",
            "option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
            "reachability": "['NOT (TARGET ${dpdk_lib})', '']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
            "reachability": "['NOT (TARGET ${dpdk_lib})', '']",
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(_Boost_VARS_LIB_${c} BOOST_LIBRARYDIR Boost_LIBRARY_DIR_${c})",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
            "reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_LIBRARY_DIR_${c}} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",
            "reachability": "['Boost_LIBRARY_DIR_${c}']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} \"\")",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_LIBRARYDIR})",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_LIBRARYDIR']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_LIBRARYDIR})",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_LIBRARYDIR)', '_ENV_BOOST_LIBRARYDIR']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_ROOT}/lib ${BOOST_ROOT}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_ROOT']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_ROOT}/lib ${_ENV_BOOST_ROOT}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_ROOT)', '_ENV_BOOST_ROOT']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_INCLUDE_DIR}/lib ${Boost_INCLUDE_DIR}/../lib ${Boost_INCLUDE_DIR}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'Boost_NO_SYSTEM_PATHS']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} PATHS C:/boost/lib C:/boost /sw/local/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (Boost_NO_SYSTEM_PATHS)', '']",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
            "reachability": "['_Boost_CHANGE_LIBDIR_DEBUG OR _Boost_CHANGE_LIBDIR_RELEASE OR _Boost_CHANGE_LIBNAME']",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c GMock Main)...MASKED_CONTENT...",
            "reachability": "['GMock_FOUND']",
            "indirect_options": {
                "GMock_FOUND": {
                    "new_option_name": "GMock_FOUND",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "find_package(GMock REQUIRED)",
                            "new_reachability": "['WITH_TESTS', 'WITH_SYSTEM_GTEST']"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_TESTS": {
                                "new_option_name": "WITH_TESTS",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        }
    ],
    "rdmacm": [
        {
            "option_name": "WITH_RDMA",
            "option_code": "option(WITH_RDMA \"Enable RDMA in async messenger\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Curses": [
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "OpenLDAP": [
        {
            "option_name": "WITH_OPENLDAP",
            "option_code": "option(WITH_OPENLDAP \"OPENLDAP is here\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "GSSApi": [
        {
            "option_name": "WITH_GSSAPI",
            "option_code": "option(WITH_GSSAPI \"GSSAPI/KRB5 is here\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "FUSE": [
        {
            "option_name": "WITH_FUSE",
            "option_code": "option(WITH_FUSE \"Fuse is here\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "xfs": [
        {
            "option_name": "WITH_XFS",
            "option_code": "option(WITH_XFS \"XFS is here\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "QatDrv": [
        {
            "option_name": "WITH_QATDRV",
            "option_code": "option(WITH_QATDRV \"Enable QAT with out-of-tree driver\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "QAT": [
        {
            "option_name": "WITH_QATDRV",
            "option_code": "option(WITH_QATDRV \"Enable QAT with out-of-tree driver\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "SQLite3": [
        {
            "option_name": "WITH_LIBCEPHSQLITE",
            "option_code": "option(WITH_LIBCEPHSQLITE \"libcephsqlite client library\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DBSTORE",
            "option_code": "option(WITH_RADOSGW_DBSTORE \"DBStore backend for RADOS Gateway\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "USE_SQLITE",
            "option_code": "option(USE_SQLITE \"Enable SQLITE DB\" ON)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_DBSTORE']",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "LZ4": [
        {
            "option_name": "WITH_LZ4",
            "option_code": "option(WITH_LZ4 \"LZ4 compression support\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "gperftools": [
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "WITH_PROFILER",
            "option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "JeMalloc": [
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2 REQUIRED)",
            "reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "ALLOCATOR": {
                                "new_option_name": "ALLOCATOR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR tcmalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR jemalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                    },
                                    {
                                        "new_option_code": "set(ALLOCATOR \"libc\")",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
            "reachability": "['WITH_PROFILER']",
            "indirect_options": {
                "WITH_PROFILER": {
                    "new_option_name": "WITH_PROFILER",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "dpdk": [
        {
            "option_name": "WITH_DPDK",
            "option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "NUMA": [
        {
            "option_name": "WITH_DPDK",
            "option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "LTTngUST": [
        {
            "option_name": "WITH_BLKIN",
            "option_code": "option(WITH_BLKIN \"Use blkin to emit LTTng tracepoints for Zipkin\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "EXPAT": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "OATH": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "c-ares": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Lua": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Protobuf": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" ON)",
            "reachability": "['EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" OFF)",
            "reachability": "['NOT (EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\")', '']",
            "indirect_options": {}
        }
    ],
    "gRPC": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" ON)",
            "reachability": "['EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\"']",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" OFF)",
            "reachability": "['NOT (EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\")', '']",
            "indirect_options": {}
        }
    ],
    "Parquet": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "ARROW_FOUND",
            "option_code": "set(ARROW_FOUND ${Arrow_FOUND})",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "PARQUET_HOME",
            "option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
            "reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']",
            "indirect_options": {}
        },
        {
            "option_name": "PARQUET_HOME",
            "option_code": "set(PARQUET_HOME ${ARROW_HOME})",
            "reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']",
            "indirect_options": {
                "PARQUET_HOME": {
                    "new_option_name": "PARQUET_HOME",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
                            "new_reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']"
                        },
                        {
                            "new_option_code": "set(PARQUET_HOME ${ARROW_HOME})",
                            "new_reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "PARQUET_HOME": {
                                "new_option_name": "PARQUET_HOME",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
                                        "new_reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']"
                                    },
                                    {
                                        "new_option_code": "set(PARQUET_HOME ${ARROW_HOME})",
                                        "new_reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "PARQUET_HOME": {
                                            "new_option_name": "PARQUET_HOME",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
                                                    "new_reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']"
                                                },
                                                {
                                                    "new_option_code": "set(PARQUET_HOME ${ARROW_HOME})",
                                                    "new_reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ],
    "utf8proc": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_UTF8PROC",
            "option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Zstd": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ZSTD",
            "option_code": "option(WITH_SYSTEM_ZSTD \"use prebuilt libzstd in system\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ZSTD",
            "option_code": "option(WITH_SYSTEM_ZSTD \"use prebuilt libzstd in system\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "ICU": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "LMDB": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_POSIX",
            "option_code": "option(WITH_RADOSGW_POSIX \"POSIX backend for Rados Gateway\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "DAOS": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DAOS",
            "option_code": "option(WITH_RADOSGW_DAOS \"DAOS backend for RADOS Gateway\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "RabbitMQ": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_AMQP_ENDPOINT",
            "option_code": "option(WITH_RADOSGW_AMQP_ENDPOINT \"RADOS Gateway's pubsub support for AMQP push endpoint\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "RDKafka": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_KAFKA_ENDPOINT",
            "option_code": "option(WITH_RADOSGW_KAFKA_ENDPOINT \"RADOS Gateway's pubsub support for Kafka push endpoint\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "gtest": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DBSTORE",
            "option_code": "option(WITH_RADOSGW_DBSTORE \"DBStore backend for RADOS Gateway\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Python3": [
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_BOOST",
            "option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "with_python_version",
            "option_code": "set(with_python_version \"${CMAKE_MATCH_1}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python([0-9])\\\\$\"']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "with_python_version",
            "option_code": "set(with_python_version \"${CMAKE_MATCH_1}.${CMAKE_MATCH_2}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'NOT (c MATCHES \"^python([0-9])\\\\$\")', 'c MATCHES \"^python([0-9])\\\\\\\\.?([0-9]+)\\\\$\"']",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_SHELL",
            "option_code": "option(WITH_CEPHFS_SHELL \"install cephfs-shell\" OFF)",
            "reachability": "['WITH_CEPHFS']",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_TOP",
            "option_code": "option(WITH_CEPHFS_TOP \"install cephfs-top utility\" ON)",
            "reachability": "['WITH_CEPHFS']",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_TOP",
            "option_code": "option(WITH_CEPHFS_TOP \"install cephfs-top utility\" ON)",
            "reachability": "['WITH_CEPHFS']",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        }
    ],
    "GTest": [
        {
            "option_name": "WITH_TESTS",
            "option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_GTEST",
            "option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
            "reachability": "['WITH_TESTS']",
            "indirect_options": {
                "WITH_TESTS": {
                    "new_option_name": "WITH_TESTS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "GMock": [
        {
            "option_name": "WITH_TESTS",
            "option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
            "reachability": "[]",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_GTEST",
            "option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
            "reachability": "['WITH_TESTS']",
            "indirect_options": {
                "WITH_TESTS": {
                    "new_option_name": "WITH_TESTS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "Sanitizers": [
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"address\")",
            "reachability": "['WITH_ASAN']",
            "indirect_options": {
                "WITH_ASAN": {
                    "new_option_name": "WITH_ASAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_ASAN \"build with ASAN\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"leak\")",
            "reachability": "['WITH_ASAN_LEAK']",
            "indirect_options": {
                "WITH_ASAN_LEAK": {
                    "new_option_name": "WITH_ASAN_LEAK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_ASAN_LEAK \"explicitly enable ASAN leak detection\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"thread\")",
            "reachability": "['WITH_TSAN']",
            "indirect_options": {
                "WITH_TSAN": {
                    "new_option_name": "WITH_TSAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TSAN \"build with TSAN\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"undefined_behavior\")",
            "reachability": "['WITH_UBSAN']",
            "indirect_options": {
                "WITH_UBSAN": {
                    "new_option_name": "WITH_UBSAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_UBSAN \"build with UBSAN\" OFF)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "RocksDB": [
        {
            "option_name": "WITH_SYSTEM_ROCKSDB",
            "option_code": "option(WITH_SYSTEM_ROCKSDB \"require and build with system rocksdb\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "LinuxZNS": [
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Boost": [
        {
            "option_name": "WITH_SYSTEM_BOOST",
            "option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "Java": [
        {
            "option_name": "WITH_CEPHFS_JAVA",
            "option_code": "option(WITH_CEPHFS_JAVA \"build libcephfs Java bindings\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "JNI": [
        {
            "option_name": "WITH_CEPHFS_JAVA",
            "option_code": "option(WITH_CEPHFS_JAVA \"build libcephfs Java bindings\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "fmt": [
        {
            "option_name": "WITH_SYSTEM_FMT",
            "option_code": "option(WITH_SYSTEM_FMT \"build against system fmt\" OFF)",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "utf8proc_LIB": [
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "CURL": [
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        }
    ],
    "Cython": [
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        }
    ],
    "PARQUET": [
        {
            "option_name": "ARROW_FOUND",
            "option_code": "set(ARROW_FOUND ${Arrow_FOUND})",
            "reachability": "[]",
            "indirect_options": {}
        }
    ],
    "libasan.so.10": [
        {
            "option_name": "Sanitizers_address_COMPILE_OPTIONS",
            "option_code": "set(Sanitizers_address_COMPILE_OPTIONS \"-fsanitize=address\")",
            "reachability": "['component STREQUAL \"address\"']",
            "indirect_options": {
                "component": {
                    "new_option_name": "component",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['pmdk_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "string(TOLOWER \"${component}\" component)",
                            "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                            "new_reachability": "['_boost_unprocessed_components']"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['Sanitizers_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                            "new_reachability": "['component STREQUAL \"core\"']"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                            "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['nl_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FIND_COMPONENTS']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {
                            "pmdk_FOUND": {
                                "new_option_name": "pmdk_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                        "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {},
                        {
                            "Sanitizers_FOUND": {
                                "new_option_name": "Sanitizers_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                        "new_reachability": "['sanitizers']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "sanitizers": {
                                            "new_option_name": "sanitizers",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"address\")",
                                                    "new_reachability": "['WITH_ASAN']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"leak\")",
                                                    "new_reachability": "['WITH_ASAN_LEAK']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"thread\")",
                                                    "new_reachability": "['WITH_TSAN']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"undefined_behavior\")",
                                                    "new_reachability": "['WITH_UBSAN']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {
                            "nl_FOUND": {
                                "new_option_name": "nl_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(nl REQUIRED genl)",
                                        "new_reachability": "['WITH_RBD', 'LINUX']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_RBD": {
                                            "new_option_name": "WITH_RBD",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "Sanitizers_leak_COMPILE_OPTIONS",
            "option_code": "set(Sanitizers_leak_COMPILE_OPTIONS \"-fsanitize=leak\")",
            "reachability": "['NOT (component STREQUAL \"address\")', 'component STREQUAL \"leak\"']",
            "indirect_options": {
                "component": {
                    "new_option_name": "component",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['pmdk_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "string(TOLOWER \"${component}\" component)",
                            "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                            "new_reachability": "['_boost_unprocessed_components']"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['Sanitizers_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                            "new_reachability": "['component STREQUAL \"core\"']"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                            "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['nl_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FIND_COMPONENTS']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                            "new_reachability": "[]"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {
                            "pmdk_FOUND": {
                                "new_option_name": "pmdk_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                        "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {},
                        {
                            "Sanitizers_FOUND": {
                                "new_option_name": "Sanitizers_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                        "new_reachability": "['sanitizers']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "sanitizers": {
                                            "new_option_name": "sanitizers",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"address\")",
                                                    "new_reachability": "['WITH_ASAN']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"leak\")",
                                                    "new_reachability": "['WITH_ASAN_LEAK']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"thread\")",
                                                    "new_reachability": "['WITH_TSAN']"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"undefined_behavior\")",
                                                    "new_reachability": "['WITH_UBSAN']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {
                            "component": {
                                "new_option_name": "component",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['pmdk_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "string(TOLOWER \"${component}\" component)",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                        "new_reachability": "['_boost_unprocessed_components']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                        "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['Sanitizers_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                        "new_reachability": "['component STREQUAL \"core\"']"
                                    },
                                    {
                                        "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                        "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                    },
                                    {
                                        "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['nl_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                        "new_reachability": "['gperftools_FOUND']"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                        "new_reachability": "[]"
                                    },
                                    {
                                        "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                        "new_reachability": "[]"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "pmdk_FOUND": {
                                            "new_option_name": "pmdk_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                                    "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {},
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "_boost_unprocessed_components": {
                                            "new_option_name": "_boost_unprocessed_components",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "Sanitizers_FOUND": {
                                            "new_option_name": "Sanitizers_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                                    "new_reachability": "['sanitizers']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "component": {
                                            "new_option_name": "component",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['pmdk_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "string(TOLOWER \"${component}\" component)",
                                                    "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                                                    "new_reachability": "['_boost_unprocessed_components']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                                                    "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['Sanitizers_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                                                    "new_reachability": "['component STREQUAL \"core\"']"
                                                },
                                                {
                                                    "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                                                    "new_reachability": "['NOT (component STREQUAL \"core\")', '']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['nl_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FIND_COMPONENTS']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                                                    "new_reachability": "['gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "nl_FOUND": {
                                            "new_option_name": "nl_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(nl REQUIRED genl)",
                                                    "new_reachability": "['WITH_RBD', 'LINUX']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "gperftools_FOUND": {
                                            "new_option_name": "gperftools_FOUND",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                                    "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                                },
                                                {
                                                    "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                                    "new_reachability": "['WITH_PROFILER']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {},
                                    {}
                                ]
                            }
                        },
                        {
                            "nl_FOUND": {
                                "new_option_name": "nl_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(nl REQUIRED genl)",
                                        "new_reachability": "['WITH_RBD', 'LINUX']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_RBD": {
                                            "new_option_name": "WITH_RBD",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {}
                    ]
                }
            }
        }
    ],
    "Backtrace_LIBRARY": [
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "indirect_options": {}
        }
    ]
}