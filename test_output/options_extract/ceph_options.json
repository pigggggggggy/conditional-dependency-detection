{
    "udev": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        }
    ],
    "blkid": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        }
    ],
    "aio": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        },
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_BLUESTORE",
            "option_code": "option(WITH_BLUESTORE \"Bluestore OSD backend\" ON)",
            "reachability": "[]",
            "actor_id": "303",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "libcryptsetup": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "actor_id": "269",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "nl": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "actor_id": "269",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "CAPNG": [
        {
            "option_name": "LINUX",
            "option_code": "set(LINUX ON)",
            "reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
            "actor_id": "15",
            "new_related_options": "CMAKE_SYSTEM_NAME MATCHES",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_LIBCEPHFS",
            "option_code": "option(WITH_LIBCEPHFS \"libcephfs client library\" ON)",
            "reachability": "[]",
            "actor_id": "648",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "verbs": [
        {
            "option_name": "WITH_RDMA",
            "option_code": "option(WITH_RDMA \"Enable RDMA in async messenger\" ON)",
            "reachability": "[]",
            "actor_id": "261",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c lvol env_dpdk sock nvmf bdev nvme conf thread trace notify accel event_accel blob vmd event_vmd event_bdev sock_posix event_sock event rpc jsonrpc json util log)...MASKED_CONTENT...",
            "reachability": "['WITH_SPDK']",
            "actor_id": "533",
            "new_related_options": "WITH_SPDK",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1010",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1017",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(c \"python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python\"']",
            "actor_id": "1024",
            "new_related_options": "WITH_SYSTEM_BOOST c MATCHES",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "c": {
                    "new_option_name": "c",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(c lvol env_dpdk sock nvmf bdev nvme conf thread trace notify accel event_accel blob vmd event_vmd event_bdev sock_posix event_sock event rpc jsonrpc json util log)...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK']",
                            "actor_id": "533",
                            "new_related_options": "WITH_SPDK"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1010",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1017",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(c \"python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python\"']",
                            "actor_id": "1024",
                            "new_related_options": "WITH_SYSTEM_BOOST c MATCHES"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1036",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(Boost_${c}_FOUND \"TRUE\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1042",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1137",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "490",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "493",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "809",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "812",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1062",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1724",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1727",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${components})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "22147",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
                            "new_reachability": "['TARGET ${dpdk_lib}']",
                            "actor_id": "22150",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
                            "new_reachability": "['NOT (TARGET ${dpdk_lib})', '']",
                            "actor_id": "22152",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "23313",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(_Boost_VARS_LIB_${c} BOOST_LIBRARYDIR Boost_LIBRARY_DIR_${c})",
                            "new_reachability": "[]",
                            "actor_id": "23314",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_LIBRARY_DIR_${c}} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",
                            "new_reachability": "['Boost_LIBRARY_DIR_${c}']",
                            "actor_id": "23334",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} \"\")",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23336",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_LIBRARYDIR']",
                            "actor_id": "23338",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_LIBRARYDIR)', '_ENV_BOOST_LIBRARYDIR']",
                            "actor_id": "23340",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR _ENV_BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_ROOT}/lib ${BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_ROOT']",
                            "actor_id": "23342",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_ROOT}/lib ${_ENV_BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_ROOT)', '_ENV_BOOST_ROOT']",
                            "actor_id": "23359",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT _ENV_BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_INCLUDE_DIR}/lib ${Boost_INCLUDE_DIR}/../lib ${Boost_INCLUDE_DIR}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23375",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'Boost_NO_SYSTEM_PATHS']",
                            "actor_id": "23407",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} PATHS C:/boost/lib C:/boost /sw/local/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (Boost_NO_SYSTEM_PATHS)', '']",
                            "actor_id": "23441",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_DEBUG OR _Boost_CHANGE_LIBDIR_RELEASE OR _Boost_CHANGE_LIBNAME']",
                            "actor_id": "23944",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_DEBUG _Boost_CHANGE_LIBDIR_RELEASE _Boost_CHANGE_LIBNAME"
                        },
                        {
                            "new_option_code": "foreach(c GMock Main)...MASKED_CONTENT...",
                            "new_reachability": "['GMock_FOUND']",
                            "actor_id": "24769",
                            "new_related_options": "GMock_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "WITH_DPDK": {
                                "new_option_name": "WITH_DPDK",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "707",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "WITH_SEASTAR": {
                                "new_option_name": "WITH_SEASTAR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                                        "new_reachability": "[]",
                                        "actor_id": "958",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "Boost_LIBRARY_DIR_${c}": {
                                "new_option_name": "Boost_LIBRARY_DIR_${c}",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                                        "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                                        "actor_id": "23332",
                                        "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {
                            "BOOST_LIBRARYDIR": {
                                "new_option_name": "BOOST_LIBRARYDIR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(BOOST_LIBRARYDIR \"${BOOST_ROOT}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")",
                                        "new_reachability": "['WITH_SYSTEM_BOOST', 'BOOST_ROOT AND CMAKE_LIBRARY_ARCHITECTURE']",
                                        "actor_id": "977",
                                        "new_related_options": "WITH_SYSTEM_BOOST BOOST_ROOT CMAKE_LIBRARY_ARCHITECTURE"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "BOOST_ROOT": {
                                            "new_option_name": "BOOST_ROOT",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(BOOST_ROOT ${install_dir})",
                                                    "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                                                    "actor_id": "1003",
                                                    "new_related_options": "WITH_SYSTEM_BOOST"
                                                },
                                                {
                                                    "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                                                    "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                                                    "actor_id": "22589",
                                                    "new_related_options": "BOOST_ROOT BOOSTROOT"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "_ENV_BOOST_ROOT": {
                                "new_option_name": "_ENV_BOOST_ROOT",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(_ENV_BOOST_ROOT \"${_ENV_BOOSTROOT}\")",
                                        "new_reachability": "['NOT _ENV_BOOST_ROOT AND _ENV_BOOSTROOT']",
                                        "actor_id": "22587",
                                        "new_related_options": "_ENV_BOOST_ROOT _ENV_BOOSTROOT"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {
                            "GMock_FOUND": {
                                "new_option_name": "GMock_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(GMock REQUIRED)",
                                        "new_reachability": "['WITH_TESTS', 'WITH_SYSTEM_GTEST']",
                                        "actor_id": "3616",
                                        "new_related_options": "WITH_TESTS WITH_SYSTEM_GTEST"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_TESTS": {
                                            "new_option_name": "WITH_TESTS",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "904",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        },
                                        "WITH_SYSTEM_GTEST": {
                                            "new_option_name": "WITH_SYSTEM_GTEST",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
                                                    "new_reachability": "['WITH_TESTS']",
                                                    "actor_id": "3613",
                                                    "new_related_options": "WITH_TESTS"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1036",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(Boost_${c}_FOUND \"TRUE\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1042",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1137",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "490",
            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "493",
            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "809",
            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk",
            "indirect_options": {
                "WITH_DPDK": {
                    "new_option_name": "WITH_DPDK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "707",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "812",
            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk",
            "indirect_options": {
                "WITH_DPDK": {
                    "new_option_name": "WITH_DPDK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "707",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
            "actor_id": "1062",
            "new_related_options": "WITH_SYSTEM_BOOST",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
            "reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "1724",
            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk",
            "indirect_options": {
                "WITH_SEASTAR": {
                    "new_option_name": "WITH_SEASTAR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                            "new_reachability": "[]",
                            "actor_id": "958",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
            "reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
            "actor_id": "1727",
            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk",
            "indirect_options": {
                "WITH_SEASTAR": {
                    "new_option_name": "WITH_SEASTAR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                            "new_reachability": "[]",
                            "actor_id": "958",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c ${components})...MASKED_CONTENT...",
            "reachability": "[]",
            "actor_id": "22147",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "DPDK_rte_${c}_LIBRARY",
            "option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
            "reachability": "['TARGET ${dpdk_lib}']",
            "actor_id": "22150",
            "new_related_options": "${dpdk_lib}",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
            "reachability": "['TARGET ${dpdk_lib}']",
            "actor_id": "22150",
            "new_related_options": "${dpdk_lib}",
            "indirect_options": {}
        },
        {
            "option_name": "DPDK_rte_${c}_LIBRARY",
            "option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
            "reachability": "['NOT (TARGET ${dpdk_lib})', '']",
            "actor_id": "22152",
            "new_related_options": "${dpdk_lib}",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
            "reachability": "['NOT (TARGET ${dpdk_lib})', '']",
            "actor_id": "22152",
            "new_related_options": "${dpdk_lib}",
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "${dpdk_lib}",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
            "reachability": "[]",
            "actor_id": "23313",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(_Boost_VARS_LIB_${c} BOOST_LIBRARYDIR Boost_LIBRARY_DIR_${c})",
            "reachability": "[]",
            "actor_id": "23314",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
            "reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
            "actor_id": "23332",
            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_LIBRARY_DIR_${c}} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",
            "reachability": "['Boost_LIBRARY_DIR_${c}']",
            "actor_id": "23334",
            "new_related_options": "Boost_LIBRARY_DIR_${c}",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} \"\")",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
            "actor_id": "23336",
            "new_related_options": "Boost_LIBRARY_DIR_${c}",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_LIBRARYDIR})",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_LIBRARYDIR']",
            "actor_id": "23338",
            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "BOOST_LIBRARYDIR": {
                    "new_option_name": "BOOST_LIBRARYDIR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(BOOST_LIBRARYDIR \"${BOOST_ROOT}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")",
                            "new_reachability": "['WITH_SYSTEM_BOOST', 'BOOST_ROOT AND CMAKE_LIBRARY_ARCHITECTURE']",
                            "actor_id": "977",
                            "new_related_options": "WITH_SYSTEM_BOOST BOOST_ROOT CMAKE_LIBRARY_ARCHITECTURE"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_SYSTEM_BOOST": {
                                "new_option_name": "WITH_SYSTEM_BOOST",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "960",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            },
                            "BOOST_ROOT": {
                                "new_option_name": "BOOST_ROOT",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(BOOST_ROOT ${install_dir})",
                                        "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                                        "actor_id": "1003",
                                        "new_related_options": "WITH_SYSTEM_BOOST"
                                    },
                                    {
                                        "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                                        "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                                        "actor_id": "22589",
                                        "new_related_options": "BOOST_ROOT BOOSTROOT"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_LIBRARYDIR})",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_LIBRARYDIR)', '_ENV_BOOST_LIBRARYDIR']",
            "actor_id": "23340",
            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR _ENV_BOOST_LIBRARYDIR",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "BOOST_LIBRARYDIR": {
                    "new_option_name": "BOOST_LIBRARYDIR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(BOOST_LIBRARYDIR \"${BOOST_ROOT}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")",
                            "new_reachability": "['WITH_SYSTEM_BOOST', 'BOOST_ROOT AND CMAKE_LIBRARY_ARCHITECTURE']",
                            "actor_id": "977",
                            "new_related_options": "WITH_SYSTEM_BOOST BOOST_ROOT CMAKE_LIBRARY_ARCHITECTURE"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_SYSTEM_BOOST": {
                                "new_option_name": "WITH_SYSTEM_BOOST",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "960",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            },
                            "BOOST_ROOT": {
                                "new_option_name": "BOOST_ROOT",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(BOOST_ROOT ${install_dir})",
                                        "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                                        "actor_id": "1003",
                                        "new_related_options": "WITH_SYSTEM_BOOST"
                                    },
                                    {
                                        "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                                        "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                                        "actor_id": "22589",
                                        "new_related_options": "BOOST_ROOT BOOSTROOT"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_ROOT}/lib ${BOOST_ROOT}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_ROOT']",
            "actor_id": "23342",
            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "BOOST_ROOT": {
                    "new_option_name": "BOOST_ROOT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(BOOST_ROOT ${install_dir})",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1003",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                            "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                            "actor_id": "22589",
                            "new_related_options": "BOOST_ROOT BOOSTROOT"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_SYSTEM_BOOST": {
                                "new_option_name": "WITH_SYSTEM_BOOST",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "960",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_ROOT}/lib ${_ENV_BOOST_ROOT}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_ROOT)', '_ENV_BOOST_ROOT']",
            "actor_id": "23359",
            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT _ENV_BOOST_ROOT",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "BOOST_ROOT": {
                    "new_option_name": "BOOST_ROOT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(BOOST_ROOT ${install_dir})",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1003",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                            "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                            "actor_id": "22589",
                            "new_related_options": "BOOST_ROOT BOOSTROOT"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_SYSTEM_BOOST": {
                                "new_option_name": "WITH_SYSTEM_BOOST",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "960",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                },
                "_ENV_BOOST_ROOT": {
                    "new_option_name": "_ENV_BOOST_ROOT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(_ENV_BOOST_ROOT \"${_ENV_BOOSTROOT}\")",
                            "new_reachability": "['NOT _ENV_BOOST_ROOT AND _ENV_BOOSTROOT']",
                            "actor_id": "22587",
                            "new_related_options": "_ENV_BOOST_ROOT _ENV_BOOSTROOT"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_INCLUDE_DIR}/lib ${Boost_INCLUDE_DIR}/../lib ${Boost_INCLUDE_DIR}/stage/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
            "actor_id": "23375",
            "new_related_options": "Boost_LIBRARY_DIR_${c}",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'Boost_NO_SYSTEM_PATHS']",
            "actor_id": "23407",
            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} PATHS C:/boost/lib C:/boost /sw/local/lib)",
            "reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (Boost_NO_SYSTEM_PATHS)', '']",
            "actor_id": "23441",
            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS",
            "indirect_options": {
                "Boost_LIBRARY_DIR_${c}": {
                    "new_option_name": "Boost_LIBRARY_DIR_${c}",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
            "reachability": "['_Boost_CHANGE_LIBDIR_DEBUG OR _Boost_CHANGE_LIBDIR_RELEASE OR _Boost_CHANGE_LIBNAME']",
            "actor_id": "23944",
            "new_related_options": "_Boost_CHANGE_LIBDIR_DEBUG _Boost_CHANGE_LIBDIR_RELEASE _Boost_CHANGE_LIBNAME",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": "foreach(c GMock Main)...MASKED_CONTENT...",
            "reachability": "['GMock_FOUND']",
            "actor_id": "24769",
            "new_related_options": "GMock_FOUND",
            "indirect_options": {
                "GMock_FOUND": {
                    "new_option_name": "GMock_FOUND",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "find_package(GMock REQUIRED)",
                            "new_reachability": "['WITH_TESTS', 'WITH_SYSTEM_GTEST']",
                            "actor_id": "3616",
                            "new_related_options": "WITH_TESTS WITH_SYSTEM_GTEST"
                        }
                    ],
                    "new_indirect_options": [
                        {
                            "WITH_TESTS": {
                                "new_option_name": "WITH_TESTS",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                                        "new_reachability": "[]",
                                        "actor_id": "904",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            },
                            "WITH_SYSTEM_GTEST": {
                                "new_option_name": "WITH_SYSTEM_GTEST",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
                                        "new_reachability": "['WITH_TESTS']",
                                        "actor_id": "3613",
                                        "new_related_options": "WITH_TESTS"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "c",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "rdmacm": [
        {
            "option_name": "WITH_RDMA",
            "option_code": "option(WITH_RDMA \"Enable RDMA in async messenger\" ON)",
            "reachability": "[]",
            "actor_id": "261",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Curses": [
        {
            "option_name": "WITH_RBD",
            "option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
            "reachability": "[]",
            "actor_id": "269",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "OpenLDAP": [
        {
            "option_name": "WITH_OPENLDAP",
            "option_code": "option(WITH_OPENLDAP \"OPENLDAP is here\" ON)",
            "reachability": "[]",
            "actor_id": "286",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "GSSApi": [
        {
            "option_name": "WITH_GSSAPI",
            "option_code": "option(WITH_GSSAPI \"GSSAPI/KRB5 is here\" OFF)",
            "reachability": "[]",
            "actor_id": "290",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "FUSE": [
        {
            "option_name": "WITH_FUSE",
            "option_code": "option(WITH_FUSE \"Fuse is here\" ON)",
            "reachability": "[]",
            "actor_id": "294",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "xfs": [
        {
            "option_name": "WITH_XFS",
            "option_code": "option(WITH_XFS \"XFS is here\" ON)",
            "reachability": "[]",
            "actor_id": "299",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "QatDrv": [
        {
            "option_name": "WITH_QATDRV",
            "option_code": "option(WITH_QATDRV \"Enable QAT with out-of-tree driver\" OFF)",
            "reachability": "[]",
            "actor_id": "555",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "QAT": [
        {
            "option_name": "WITH_QATDRV",
            "option_code": "option(WITH_QATDRV \"Enable QAT with out-of-tree driver\" OFF)",
            "reachability": "[]",
            "actor_id": "555",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "SQLite3": [
        {
            "option_name": "WITH_LIBCEPHSQLITE",
            "option_code": "option(WITH_LIBCEPHSQLITE \"libcephsqlite client library\" ON)",
            "reachability": "[]",
            "actor_id": "649",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DBSTORE",
            "option_code": "option(WITH_RADOSGW_DBSTORE \"DBStore backend for RADOS Gateway\" ON)",
            "reachability": "[]",
            "actor_id": "837",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "USE_SQLITE",
            "option_code": "option(USE_SQLITE \"Enable SQLITE DB\" ON)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_DBSTORE']",
            "actor_id": "11484",
            "new_related_options": "WITH_RADOSGW WITH_RADOSGW_DBSTORE",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "832",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_DBSTORE": {
                    "new_option_name": "WITH_RADOSGW_DBSTORE",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_DBSTORE \"DBStore backend for RADOS Gateway\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "837",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "LZ4": [
        {
            "option_name": "WITH_LZ4",
            "option_code": "option(WITH_LZ4 \"LZ4 compression support\" ON)",
            "reachability": "[]",
            "actor_id": "664",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "gperftools": [
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "actor_id": "669",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "actor_id": "669",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "actor_id": "687",
            "new_related_options": "ALLOCATOR gperftools_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "actor_id": "687",
            "new_related_options": "ALLOCATOR gperftools_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "actor_id": "690",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "actor_id": "690",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "actor_id": "695",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "actor_id": "695",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_PROFILER",
            "option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
            "reachability": "[]",
            "actor_id": "2664",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "JeMalloc": [
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "actor_id": "669",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
            "reachability": "[]",
            "actor_id": "669",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2 REQUIRED)",
            "reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
            "actor_id": "672",
            "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
            "actor_id": "682",
            "new_related_options": "ALLOCATOR",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "actor_id": "687",
            "new_related_options": "ALLOCATOR gperftools_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR tcmalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
            "actor_id": "687",
            "new_related_options": "ALLOCATOR gperftools_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "actor_id": "690",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR jemalloc)",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
            "actor_id": "690",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "actor_id": "695",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "ALLOCATOR",
            "option_code": "set(ALLOCATOR \"libc\")",
            "reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
            "actor_id": "695",
            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND",
            "indirect_options": {
                "ALLOCATOR": {
                    "new_option_name": "ALLOCATOR",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                            "new_reachability": "[]",
                            "actor_id": "669",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(ALLOCATOR tcmalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                            "actor_id": "687",
                            "new_related_options": "ALLOCATOR gperftools_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR jemalloc)",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                            "actor_id": "690",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        },
                        {
                            "new_option_code": "set(ALLOCATOR \"libc\")",
                            "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                            "actor_id": "695",
                            "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "JeMalloc_FOUND": {
                                "new_option_name": "JeMalloc_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(JeMalloc REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', 'NOT (${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\")', '${ALLOCATOR} STREQUAL \"jemalloc\"']",
                                        "actor_id": "676",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR}  STREQUAL"
                                    },
                                    {
                                        "new_option_code": "find_package(JeMalloc)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT gperftools_FOUND']",
                                        "actor_id": "685",
                                        "new_related_options": "ALLOCATOR gperftools_FOUND"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "gperftools_FOUND",
            "option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
            "reachability": "['WITH_PROFILER']",
            "actor_id": "2666",
            "new_related_options": "WITH_PROFILER",
            "indirect_options": {
                "WITH_PROFILER": {
                    "new_option_name": "WITH_PROFILER",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "2664",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "dpdk": [
        {
            "option_name": "WITH_DPDK",
            "option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
            "reachability": "[]",
            "actor_id": "707",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "actor_id": "958",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "NUMA": [
        {
            "option_name": "WITH_DPDK",
            "option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
            "reachability": "[]",
            "actor_id": "707",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "actor_id": "958",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "LTTngUST": [
        {
            "option_name": "WITH_BLKIN",
            "option_code": "option(WITH_BLKIN \"Use blkin to emit LTTng tracepoints for Zipkin\" OFF)",
            "reachability": "[]",
            "actor_id": "824",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "EXPAT": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "OATH": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "c-ares": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "actor_id": "958",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Lua": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "868",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Protobuf": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" ON)",
            "reachability": "['EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\"']",
            "actor_id": "11189",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" OFF)",
            "reachability": "['NOT (EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\")', '']",
            "actor_id": "11191",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "gRPC": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" ON)",
            "reachability": "['EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\"']",
            "actor_id": "11189",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_NVMEOF_GATEWAY_MONITOR_CLIENT",
            "option_code": "option(WITH_NVMEOF_GATEWAY_MONITOR_CLIENT \"build nvmeof gateway monitor client\" OFF)",
            "reachability": "['NOT (EXISTS \"/etc/redhat-release\" OR EXISTS \"/etc/fedora-release\")', '']",
            "actor_id": "11191",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Parquet": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "ARROW_FOUND",
            "option_code": "set(ARROW_FOUND ${Arrow_FOUND})",
            "reachability": "[]",
            "actor_id": "22103",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "PARQUET_HOME",
            "option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
            "reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']",
            "actor_id": "24654",
            "new_related_options": "STREQUAL",
            "indirect_options": {}
        },
        {
            "option_name": "PARQUET_HOME",
            "option_code": "set(PARQUET_HOME ${ARROW_HOME})",
            "reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']",
            "actor_id": "24656",
            "new_related_options": "PARQUET_HOME ARROW_HOME",
            "indirect_options": {
                "PARQUET_HOME": {
                    "new_option_name": "PARQUET_HOME",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "file(TO_CMAKE_PATH \"$ENV{PARQUET_HOME}\" PARQUET_HOME)",
                            "new_reachability": "['NOT \"$ENV{PARQUET_HOME}\" STREQUAL \"\"']",
                            "actor_id": "24654",
                            "new_related_options": "STREQUAL"
                        },
                        {
                            "new_option_code": "set(PARQUET_HOME ${ARROW_HOME})",
                            "new_reachability": "['NOT PARQUET_HOME) AND ARROW_HOME']",
                            "actor_id": "24656",
                            "new_related_options": "PARQUET_HOME ARROW_HOME"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {
                            "ARROW_HOME": {
                                "new_option_name": "ARROW_HOME",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "file(TO_CMAKE_PATH \"$ENV{ARROW_HOME}\" ARROW_HOME)",
                                        "new_reachability": "['NOT \"$ENV{ARROW_HOME}\" STREQUAL \"\"']",
                                        "actor_id": "21961",
                                        "new_related_options": "STREQUAL"
                                    },
                                    {
                                        "new_option_code": "arrow_find_package(ARROW \"${ARROW_HOME}\" arrow arrow/api.h Arrow arrow)",
                                        "new_reachability": "[]",
                                        "actor_id": "21962",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ],
    "utf8proc": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_UTF8PROC",
            "option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
            "reachability": "[]",
            "actor_id": "846",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Zstd": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_SELECT_PARQUET",
            "option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
            "reachability": "[]",
            "actor_id": "842",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_ARROW_FLIGHT",
            "option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "843",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ARROW",
            "option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
            "reachability": "[]",
            "actor_id": "845",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ZSTD",
            "option_code": "option(WITH_SYSTEM_ZSTD \"use prebuilt libzstd in system\" OFF)",
            "reachability": "[]",
            "actor_id": "3668",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_ZSTD",
            "option_code": "option(WITH_SYSTEM_ZSTD \"use prebuilt libzstd in system\" OFF)",
            "reachability": "[]",
            "actor_id": "3668",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "ICU": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "LMDB": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_POSIX",
            "option_code": "option(WITH_RADOSGW_POSIX \"POSIX backend for Rados Gateway\" ON)",
            "reachability": "[]",
            "actor_id": "841",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "DAOS": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DAOS",
            "option_code": "option(WITH_RADOSGW_DAOS \"DAOS backend for RADOS Gateway\" OFF)",
            "reachability": "[]",
            "actor_id": "839",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "RabbitMQ": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_AMQP_ENDPOINT",
            "option_code": "option(WITH_RADOSGW_AMQP_ENDPOINT \"RADOS Gateway's pubsub support for AMQP push endpoint\" ON)",
            "reachability": "[]",
            "actor_id": "834",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "RDKafka": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_KAFKA_ENDPOINT",
            "option_code": "option(WITH_RADOSGW_KAFKA_ENDPOINT \"RADOS Gateway's pubsub support for Kafka push endpoint\" ON)",
            "reachability": "[]",
            "actor_id": "835",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "gtest": [
        {
            "option_name": "WITH_RADOSGW",
            "option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "832",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_RADOSGW_DBSTORE",
            "option_code": "option(WITH_RADOSGW_DBSTORE \"DBStore backend for RADOS Gateway\" ON)",
            "reachability": "[]",
            "actor_id": "837",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Python3": [
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "868",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "868",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_CEPHFS",
            "option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
            "reachability": "[]",
            "actor_id": "868",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_BOOST",
            "option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
            "reachability": "[]",
            "actor_id": "960",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "with_python_version",
            "option_code": "set(with_python_version \"${CMAKE_MATCH_1}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python([0-9])\\\\$\"']",
            "actor_id": "1064",
            "new_related_options": "WITH_SYSTEM_BOOST c MATCHES",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "c": {
                    "new_option_name": "c",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(c lvol env_dpdk sock nvmf bdev nvme conf thread trace notify accel event_accel blob vmd event_vmd event_bdev sock_posix event_sock event rpc jsonrpc json util log)...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK']",
                            "actor_id": "533",
                            "new_related_options": "WITH_SPDK"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1010",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1017",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(c \"python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python\"']",
                            "actor_id": "1024",
                            "new_related_options": "WITH_SYSTEM_BOOST c MATCHES"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1036",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(Boost_${c}_FOUND \"TRUE\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1042",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1137",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "490",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "493",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "809",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "812",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1062",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1724",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1727",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${components})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "22147",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
                            "new_reachability": "['TARGET ${dpdk_lib}']",
                            "actor_id": "22150",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
                            "new_reachability": "['NOT (TARGET ${dpdk_lib})', '']",
                            "actor_id": "22152",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "23313",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(_Boost_VARS_LIB_${c} BOOST_LIBRARYDIR Boost_LIBRARY_DIR_${c})",
                            "new_reachability": "[]",
                            "actor_id": "23314",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_LIBRARY_DIR_${c}} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",
                            "new_reachability": "['Boost_LIBRARY_DIR_${c}']",
                            "actor_id": "23334",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} \"\")",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23336",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_LIBRARYDIR']",
                            "actor_id": "23338",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_LIBRARYDIR)', '_ENV_BOOST_LIBRARYDIR']",
                            "actor_id": "23340",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR _ENV_BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_ROOT}/lib ${BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_ROOT']",
                            "actor_id": "23342",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_ROOT}/lib ${_ENV_BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_ROOT)', '_ENV_BOOST_ROOT']",
                            "actor_id": "23359",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT _ENV_BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_INCLUDE_DIR}/lib ${Boost_INCLUDE_DIR}/../lib ${Boost_INCLUDE_DIR}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23375",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'Boost_NO_SYSTEM_PATHS']",
                            "actor_id": "23407",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} PATHS C:/boost/lib C:/boost /sw/local/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (Boost_NO_SYSTEM_PATHS)', '']",
                            "actor_id": "23441",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_DEBUG OR _Boost_CHANGE_LIBDIR_RELEASE OR _Boost_CHANGE_LIBNAME']",
                            "actor_id": "23944",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_DEBUG _Boost_CHANGE_LIBDIR_RELEASE _Boost_CHANGE_LIBNAME"
                        },
                        {
                            "new_option_code": "foreach(c GMock Main)...MASKED_CONTENT...",
                            "new_reachability": "['GMock_FOUND']",
                            "actor_id": "24769",
                            "new_related_options": "GMock_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "WITH_DPDK": {
                                "new_option_name": "WITH_DPDK",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "707",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "WITH_SEASTAR": {
                                "new_option_name": "WITH_SEASTAR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                                        "new_reachability": "[]",
                                        "actor_id": "958",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "Boost_LIBRARY_DIR_${c}": {
                                "new_option_name": "Boost_LIBRARY_DIR_${c}",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                                        "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                                        "actor_id": "23332",
                                        "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {
                            "BOOST_LIBRARYDIR": {
                                "new_option_name": "BOOST_LIBRARYDIR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(BOOST_LIBRARYDIR \"${BOOST_ROOT}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")",
                                        "new_reachability": "['WITH_SYSTEM_BOOST', 'BOOST_ROOT AND CMAKE_LIBRARY_ARCHITECTURE']",
                                        "actor_id": "977",
                                        "new_related_options": "WITH_SYSTEM_BOOST BOOST_ROOT CMAKE_LIBRARY_ARCHITECTURE"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "BOOST_ROOT": {
                                            "new_option_name": "BOOST_ROOT",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(BOOST_ROOT ${install_dir})",
                                                    "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                                                    "actor_id": "1003",
                                                    "new_related_options": "WITH_SYSTEM_BOOST"
                                                },
                                                {
                                                    "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                                                    "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                                                    "actor_id": "22589",
                                                    "new_related_options": "BOOST_ROOT BOOSTROOT"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "_ENV_BOOST_ROOT": {
                                "new_option_name": "_ENV_BOOST_ROOT",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(_ENV_BOOST_ROOT \"${_ENV_BOOSTROOT}\")",
                                        "new_reachability": "['NOT _ENV_BOOST_ROOT AND _ENV_BOOSTROOT']",
                                        "actor_id": "22587",
                                        "new_related_options": "_ENV_BOOST_ROOT _ENV_BOOSTROOT"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {
                            "GMock_FOUND": {
                                "new_option_name": "GMock_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(GMock REQUIRED)",
                                        "new_reachability": "['WITH_TESTS', 'WITH_SYSTEM_GTEST']",
                                        "actor_id": "3616",
                                        "new_related_options": "WITH_TESTS WITH_SYSTEM_GTEST"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_TESTS": {
                                            "new_option_name": "WITH_TESTS",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "904",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        },
                                        "WITH_SYSTEM_GTEST": {
                                            "new_option_name": "WITH_SYSTEM_GTEST",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
                                                    "new_reachability": "['WITH_TESTS']",
                                                    "actor_id": "3613",
                                                    "new_related_options": "WITH_TESTS"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "with_python_version",
            "option_code": "set(with_python_version \"${CMAKE_MATCH_1}.${CMAKE_MATCH_2}\")",
            "reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'NOT (c MATCHES \"^python([0-9])\\\\$\")', 'c MATCHES \"^python([0-9])\\\\\\\\.?([0-9]+)\\\\$\"']",
            "actor_id": "1067",
            "new_related_options": "WITH_SYSTEM_BOOST c ",
            "indirect_options": {
                "WITH_SYSTEM_BOOST": {
                    "new_option_name": "WITH_SYSTEM_BOOST",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "960",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "c": {
                    "new_option_name": "c",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(c lvol env_dpdk sock nvmf bdev nvme conf thread trace notify accel event_accel blob vmd event_vmd event_bdev sock_posix event_sock event rpc jsonrpc json util log)...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK']",
                            "actor_id": "533",
                            "new_related_options": "WITH_SPDK"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1010",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1017",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(c \"python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '', 'c MATCHES \"^python\"']",
                            "actor_id": "1024",
                            "new_related_options": "WITH_SYSTEM_BOOST c MATCHES"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1036",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "set(Boost_${c}_FOUND \"TRUE\")",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1042",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1137",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "490",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SPDK', 'NOT TARGET dpdk-ext', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "493",
                            "new_related_options": "WITH_SPDK dpdk-ext dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "809",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "812",
                            "new_related_options": "WITH_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${Boost_BUILD_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                            "actor_id": "1062",
                            "new_related_options": "WITH_SYSTEM_BOOST"
                        },
                        {
                            "new_option_code": "foreach(c ${dpdk_components})...MASKED_CONTENT...",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1724",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "set(dpdk_${c}_LIBRARY \"${dpdk_dir}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}rte_${c}${CMAKE_STATIC_LIBRARY_SUFFIX}\")",
                            "new_reachability": "['WITH_SEASTAR', 'Seastar_DPDK', 'NOT DPDK_FOUND', 'NOT TARGET dpdk::dpdk']",
                            "actor_id": "1727",
                            "new_related_options": "WITH_SEASTAR Seastar_DPDK DPDK_FOUND dpdk::dpdk"
                        },
                        {
                            "new_option_code": "foreach(c ${components})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "22147",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "get_target_property(DPDK_rte_${c}_LIBRARY ${dpdk_lib} IMPORTED_LOCATION)",
                            "new_reachability": "['TARGET ${dpdk_lib}']",
                            "actor_id": "22150",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "find_library(DPDK_rte_${c}_LIBRARY rte_${c} HINTS ENV DPDK_DIR ${dpdk_LIBRARY_DIRS} PATH_SUFFIXES lib)",
                            "new_reachability": "['NOT (TARGET ${dpdk_lib})', '']",
                            "actor_id": "22152",
                            "new_related_options": "${dpdk_lib}"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "23313",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "set(_Boost_VARS_LIB_${c} BOOST_LIBRARYDIR Boost_LIBRARY_DIR_${c})",
                            "new_reachability": "[]",
                            "actor_id": "23314",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                            "actor_id": "23332",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_LIBRARY_DIR_${c}} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)",
                            "new_reachability": "['Boost_LIBRARY_DIR_${c}']",
                            "actor_id": "23334",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "set(_boost_LIBRARY_SEARCH_DIRS_${c} \"\")",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23336",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_LIBRARYDIR']",
                            "actor_id": "23338",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_LIBRARYDIR})",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_LIBRARYDIR)', '_ENV_BOOST_LIBRARYDIR']",
                            "actor_id": "23340",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_LIBRARYDIR _ENV_BOOST_LIBRARYDIR"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${BOOST_ROOT}/lib ${BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'BOOST_ROOT']",
                            "actor_id": "23342",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${_ENV_BOOST_ROOT}/lib ${_ENV_BOOST_ROOT}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (BOOST_ROOT)', '_ENV_BOOST_ROOT']",
                            "actor_id": "23359",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} BOOST_ROOT _ENV_BOOST_ROOT"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} ${Boost_INCLUDE_DIR}/lib ${Boost_INCLUDE_DIR}/../lib ${Boost_INCLUDE_DIR}/stage/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '']",
                            "actor_id": "23375",
                            "new_related_options": "Boost_LIBRARY_DIR_${c}"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'Boost_NO_SYSTEM_PATHS']",
                            "actor_id": "23407",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "list(APPEND _boost_LIBRARY_SEARCH_DIRS_${c} PATHS C:/boost/lib C:/boost /sw/local/lib)",
                            "new_reachability": "['NOT (Boost_LIBRARY_DIR_${c})', '', 'NOT (Boost_NO_SYSTEM_PATHS)', '']",
                            "actor_id": "23441",
                            "new_related_options": "Boost_LIBRARY_DIR_${c} Boost_NO_SYSTEM_PATHS"
                        },
                        {
                            "new_option_code": "foreach(c DEBUG RELEASE)...MASKED_CONTENT...",
                            "new_reachability": "['_Boost_CHANGE_LIBDIR_DEBUG OR _Boost_CHANGE_LIBDIR_RELEASE OR _Boost_CHANGE_LIBNAME']",
                            "actor_id": "23944",
                            "new_related_options": "_Boost_CHANGE_LIBDIR_DEBUG _Boost_CHANGE_LIBDIR_RELEASE _Boost_CHANGE_LIBNAME"
                        },
                        {
                            "new_option_code": "foreach(c GMock Main)...MASKED_CONTENT...",
                            "new_reachability": "['GMock_FOUND']",
                            "actor_id": "24769",
                            "new_related_options": "GMock_FOUND"
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "WITH_DPDK": {
                                "new_option_name": "WITH_DPDK",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_DPDK \"Enable DPDK messaging\" OFF)",
                                        "new_reachability": "[]",
                                        "actor_id": "707",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "WITH_SEASTAR": {
                                "new_option_name": "WITH_SEASTAR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "option(WITH_SEASTAR \"Build seastar components\")",
                                        "new_reachability": "[]",
                                        "actor_id": "958",
                                        "new_related_options": ""
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {
                            "Boost_LIBRARY_DIR_${c}": {
                                "new_option_name": "Boost_LIBRARY_DIR_${c}",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "unset(Boost_LIBRARY_DIR_${c} CACHE)",
                                        "new_reachability": "['_Boost_CHANGE_LIBDIR_${c} AND NOT _Boost_LIBRARY_DIR_${c}_CHANGED']",
                                        "actor_id": "23332",
                                        "new_related_options": "_Boost_CHANGE_LIBDIR_${c} _Boost_LIBRARY_DIR_${c}_CHANGED"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {
                            "BOOST_LIBRARYDIR": {
                                "new_option_name": "BOOST_LIBRARYDIR",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(BOOST_LIBRARYDIR \"${BOOST_ROOT}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")",
                                        "new_reachability": "['WITH_SYSTEM_BOOST', 'BOOST_ROOT AND CMAKE_LIBRARY_ARCHITECTURE']",
                                        "actor_id": "977",
                                        "new_related_options": "WITH_SYSTEM_BOOST BOOST_ROOT CMAKE_LIBRARY_ARCHITECTURE"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "BOOST_ROOT": {
                                            "new_option_name": "BOOST_ROOT",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(BOOST_ROOT ${install_dir})",
                                                    "new_reachability": "['NOT (WITH_SYSTEM_BOOST)', '']",
                                                    "actor_id": "1003",
                                                    "new_related_options": "WITH_SYSTEM_BOOST"
                                                },
                                                {
                                                    "new_option_code": "set(BOOST_ROOT \"${BOOSTROOT}\")",
                                                    "new_reachability": "['NOT BOOST_ROOT AND BOOSTROOT']",
                                                    "actor_id": "22589",
                                                    "new_related_options": "BOOST_ROOT BOOSTROOT"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "_ENV_BOOST_ROOT": {
                                "new_option_name": "_ENV_BOOST_ROOT",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "set(_ENV_BOOST_ROOT \"${_ENV_BOOSTROOT}\")",
                                        "new_reachability": "['NOT _ENV_BOOST_ROOT AND _ENV_BOOSTROOT']",
                                        "actor_id": "22587",
                                        "new_related_options": "_ENV_BOOST_ROOT _ENV_BOOSTROOT"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {},
                        {
                            "GMock_FOUND": {
                                "new_option_name": "GMock_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(GMock REQUIRED)",
                                        "new_reachability": "['WITH_TESTS', 'WITH_SYSTEM_GTEST']",
                                        "actor_id": "3616",
                                        "new_related_options": "WITH_TESTS WITH_SYSTEM_GTEST"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_TESTS": {
                                            "new_option_name": "WITH_TESTS",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "904",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        },
                                        "WITH_SYSTEM_GTEST": {
                                            "new_option_name": "WITH_SYSTEM_GTEST",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
                                                    "new_reachability": "['WITH_TESTS']",
                                                    "actor_id": "3613",
                                                    "new_related_options": "WITH_TESTS"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_SHELL",
            "option_code": "option(WITH_CEPHFS_SHELL \"install cephfs-shell\" OFF)",
            "reachability": "['WITH_CEPHFS']",
            "actor_id": "3810",
            "new_related_options": "WITH_CEPHFS",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "868",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_TOP",
            "option_code": "option(WITH_CEPHFS_TOP \"install cephfs-top utility\" ON)",
            "reachability": "['WITH_CEPHFS']",
            "actor_id": "3863",
            "new_related_options": "WITH_CEPHFS",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "868",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WITH_CEPHFS_TOP",
            "option_code": "option(WITH_CEPHFS_TOP \"install cephfs-top utility\" ON)",
            "reachability": "['WITH_CEPHFS']",
            "actor_id": "3863",
            "new_related_options": "WITH_CEPHFS",
            "indirect_options": {
                "WITH_CEPHFS": {
                    "new_option_name": "WITH_CEPHFS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_CEPHFS \"CephFS is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "868",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "GTest": [
        {
            "option_name": "WITH_TESTS",
            "option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
            "reachability": "[]",
            "actor_id": "904",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_GTEST",
            "option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
            "reachability": "['WITH_TESTS']",
            "actor_id": "3613",
            "new_related_options": "WITH_TESTS",
            "indirect_options": {
                "WITH_TESTS": {
                    "new_option_name": "WITH_TESTS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "904",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "GMock": [
        {
            "option_name": "WITH_TESTS",
            "option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
            "reachability": "[]",
            "actor_id": "904",
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WITH_SYSTEM_GTEST",
            "option_code": "option(WITH_SYSTEM_GTEST \"require and build with system gtest and gmock\" OFF)",
            "reachability": "['WITH_TESTS']",
            "actor_id": "3613",
            "new_related_options": "WITH_TESTS",
            "indirect_options": {
                "WITH_TESTS": {
                    "new_option_name": "WITH_TESTS",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TESTS \"enable the build of ceph-test package scripts/binaries\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "904",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "Sanitizers": [
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"address\")",
            "reachability": "['WITH_ASAN']",
            "actor_id": "939",
            "new_related_options": "WITH_ASAN",
            "indirect_options": {
                "WITH_ASAN": {
                    "new_option_name": "WITH_ASAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_ASAN \"build with ASAN\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "937",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"leak\")",
            "reachability": "['WITH_ASAN_LEAK']",
            "actor_id": "942",
            "new_related_options": "WITH_ASAN_LEAK",
            "indirect_options": {
                "WITH_ASAN_LEAK": {
                    "new_option_name": "WITH_ASAN_LEAK",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_ASAN_LEAK \"explicitly enable ASAN leak detection\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "940",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"thread\")",
            "reachability": "['WITH_TSAN']",
            "actor_id": "945",
            "new_related_options": "WITH_TSAN",
            "indirect_options": {
                "WITH_TSAN": {
                    "new_option_name": "WITH_TSAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_TSAN \"build with TSAN\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "943",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "sanitizers",
            "option_code": "list(APPEND sanitizers \"undefined_behavior\")",
            "reachability": "['WITH_UBSAN']",
            "actor_id": "948",
            "new_related_options": "WITH_UBSAN",
            "indirect_options": {
                "WITH_UBSAN": {
                    "new_option_name": "WITH_UBSAN",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_UBSAN \"build with UBSAN\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "946",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "RocksDB": [
        {
            "option_name": "WITH_SYSTEM_ROCKSDB",
            "option_code": "option(WITH_SYSTEM_ROCKSDB \"require and build with system rocksdb\" OFF)",
            "reachability": "[]",
            "actor_id": "955",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "LinuxZNS": [
        {
            "option_name": "WITH_SEASTAR",
            "option_code": "option(WITH_SEASTAR \"Build seastar components\")",
            "reachability": "[]",
            "actor_id": "958",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Boost": [
        {
            "option_name": "WITH_SYSTEM_BOOST",
            "option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
            "reachability": "[]",
            "actor_id": "960",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Java": [
        {
            "option_name": "WITH_CEPHFS_JAVA",
            "option_code": "option(WITH_CEPHFS_JAVA \"build libcephfs Java bindings\" OFF)",
            "reachability": "[]",
            "actor_id": "1487",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "JNI": [
        {
            "option_name": "WITH_CEPHFS_JAVA",
            "option_code": "option(WITH_CEPHFS_JAVA \"build libcephfs Java bindings\" OFF)",
            "reachability": "[]",
            "actor_id": "1487",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "fmt": [
        {
            "option_name": "WITH_SYSTEM_FMT",
            "option_code": "option(WITH_SYSTEM_FMT \"build against system fmt\" OFF)",
            "reachability": "[]",
            "actor_id": "1580",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "utf8proc_LIB": [
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "actor_id": "11350",
            "new_related_options": "WITH_RADOSGW WITH_RADOSGW_SELECT_PARQUET WITH_RADOSGW_ARROW_FLIGHT WITH_SYSTEM_ARROW WITH_SYSTEM_UTF8PROC",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "832",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_SELECT_PARQUET": {
                    "new_option_name": "WITH_RADOSGW_SELECT_PARQUET",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "842",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_ARROW_FLIGHT": {
                    "new_option_name": "WITH_RADOSGW_ARROW_FLIGHT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "843",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_ARROW": {
                    "new_option_name": "WITH_SYSTEM_ARROW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "845",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_UTF8PROC": {
                    "new_option_name": "WITH_SYSTEM_UTF8PROC",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "846",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "actor_id": "11350",
            "new_related_options": "WITH_RADOSGW WITH_RADOSGW_SELECT_PARQUET WITH_RADOSGW_ARROW_FLIGHT WITH_SYSTEM_ARROW WITH_SYSTEM_UTF8PROC",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "832",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_SELECT_PARQUET": {
                    "new_option_name": "WITH_RADOSGW_SELECT_PARQUET",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "842",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_ARROW_FLIGHT": {
                    "new_option_name": "WITH_RADOSGW_ARROW_FLIGHT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "843",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_ARROW": {
                    "new_option_name": "WITH_SYSTEM_ARROW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "845",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_UTF8PROC": {
                    "new_option_name": "WITH_SYSTEM_UTF8PROC",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "846",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "actor_id": "11350",
            "new_related_options": "WITH_RADOSGW WITH_RADOSGW_SELECT_PARQUET WITH_RADOSGW_ARROW_FLIGHT WITH_SYSTEM_ARROW WITH_SYSTEM_UTF8PROC",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "832",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_SELECT_PARQUET": {
                    "new_option_name": "WITH_RADOSGW_SELECT_PARQUET",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "842",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_ARROW_FLIGHT": {
                    "new_option_name": "WITH_RADOSGW_ARROW_FLIGHT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "843",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_ARROW": {
                    "new_option_name": "WITH_SYSTEM_ARROW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "845",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_UTF8PROC": {
                    "new_option_name": "WITH_SYSTEM_UTF8PROC",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "846",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "utf8proc_ROOT",
            "option_code": "set(utf8proc_ROOT \"${utf8proc_INSTALL_PREFIX}\" PARENT_SCOPE)",
            "reachability": "['WITH_RADOSGW', 'WITH_RADOSGW_SELECT_PARQUET OR WITH_RADOSGW_ARROW_FLIGHT', 'NOT (WITH_SYSTEM_ARROW)', '', 'NOT (WITH_SYSTEM_UTF8PROC)', '']",
            "actor_id": "11350",
            "new_related_options": "WITH_RADOSGW WITH_RADOSGW_SELECT_PARQUET WITH_RADOSGW_ARROW_FLIGHT WITH_SYSTEM_ARROW WITH_SYSTEM_UTF8PROC",
            "indirect_options": {
                "WITH_RADOSGW": {
                    "new_option_name": "WITH_RADOSGW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW \"RADOS Gateway is enabled\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "832",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_SELECT_PARQUET": {
                    "new_option_name": "WITH_RADOSGW_SELECT_PARQUET",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_SELECT_PARQUET \"Support for s3 select on parquet objects\" ON)",
                            "new_reachability": "[]",
                            "actor_id": "842",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_RADOSGW_ARROW_FLIGHT": {
                    "new_option_name": "WITH_RADOSGW_ARROW_FLIGHT",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_RADOSGW_ARROW_FLIGHT \"Build arrow flight when not using system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "843",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_ARROW": {
                    "new_option_name": "WITH_SYSTEM_ARROW",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_ARROW \"Use system-provided arrow\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "845",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                },
                "WITH_SYSTEM_UTF8PROC": {
                    "new_option_name": "WITH_SYSTEM_UTF8PROC",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "option(WITH_SYSTEM_UTF8PROC \"Use system-provided utf8proc\" OFF)",
                            "new_reachability": "[]",
                            "actor_id": "846",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {}
                    ]
                }
            }
        }
    ],
    "CURL": [
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "Cython": [
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "WIN32",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "PARQUET": [
        {
            "option_name": "ARROW_FOUND",
            "option_code": "set(ARROW_FOUND ${Arrow_FOUND})",
            "reachability": "[]",
            "actor_id": "22103",
            "new_related_options": "",
            "indirect_options": {}
        }
    ],
    "libasan.so.10": [
        {
            "option_name": "Sanitizers_address_COMPILE_OPTIONS",
            "option_code": "set(Sanitizers_address_COMPILE_OPTIONS \"-fsanitize=address\")",
            "reachability": "['component STREQUAL \"address\"']",
            "actor_id": "24540",
            "new_related_options": "component STREQUAL",
            "indirect_options": {
                "component": {
                    "new_option_name": "component",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "12112",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                            "new_reachability": "[]",
                            "actor_id": "12121",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['pmdk_FOUND']",
                            "actor_id": "12129",
                            "new_related_options": "pmdk_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24062",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24136",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "string(TOLOWER \"${component}\" component)",
                            "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']",
                            "actor_id": "22316",
                            "new_related_options": "Boost_NO_BOOST_CMAKE Boost_FOUND Boost_${comp}_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                            "new_reachability": "['_boost_unprocessed_components']",
                            "actor_id": "23507",
                            "new_related_options": "_boost_unprocessed_components"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']",
                            "actor_id": "23512",
                            "new_related_options": "_boost_unprocessed_components component MATCHES"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']",
                            "actor_id": "23990",
                            "new_related_options": "component MATCHES"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24538",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['Sanitizers_FOUND']",
                            "actor_id": "24573",
                            "new_related_options": "Sanitizers_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24832",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                            "new_reachability": "['component STREQUAL \"core\"']",
                            "actor_id": "24838",
                            "new_related_options": "component STREQUAL"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                            "new_reachability": "['NOT (component STREQUAL \"core\")', '']",
                            "actor_id": "24840",
                            "new_related_options": "component STREQUAL"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['nl_FOUND']",
                            "actor_id": "24846",
                            "new_related_options": "nl_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24896",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FIND_COMPONENTS']",
                            "actor_id": "24902",
                            "new_related_options": "gperftools_FIND_COMPONENTS"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']",
                            "actor_id": "24911",
                            "new_related_options": "gperftools_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']",
                            "actor_id": "24916",
                            "new_related_options": "gperftools_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24983",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                            "new_reachability": "[]",
                            "actor_id": "24984",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24990",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {
                            "pmdk_FOUND": {
                                "new_option_name": "pmdk_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                        "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']",
                                        "actor_id": "2302",
                                        "new_related_options": "WITH_BLUESTORE_PMEM WITH_RBD_RWL WITH_SYSTEM_PMDK"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "Boost_FOUND": {
                                "new_option_name": "Boost_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Boost 1.85 COMPONENTS ${BOOST_COMPONENTS} REQUIRED)",
                                        "new_reachability": "['WITH_SYSTEM_BOOST']",
                                        "actor_id": "978",
                                        "new_related_options": "WITH_SYSTEM_BOOST"
                                    },
                                    {
                                        "new_option_code": "find_package(Boost QUIET NO_MODULE ${_boost_FIND_PACKAGE_ARGS})",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE']",
                                        "actor_id": "22210",
                                        "new_related_options": "Boost_NO_BOOST_CMAKE"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_SYSTEM_BOOST": {
                                            "new_option_name": "WITH_SYSTEM_BOOST",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "960",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {}
                                ]
                            }
                        },
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]",
                                        "actor_id": "23504",
                                        "new_related_options": ""
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']",
                                        "actor_id": "23927",
                                        "new_related_options": "_boost_unprocessed_components"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "Sanitizers_FOUND": {
                                "new_option_name": "Sanitizers_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                        "new_reachability": "['sanitizers']",
                                        "actor_id": "950",
                                        "new_related_options": "sanitizers"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "sanitizers": {
                                            "new_option_name": "sanitizers",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"address\")",
                                                    "new_reachability": "['WITH_ASAN']",
                                                    "actor_id": "939",
                                                    "new_related_options": "WITH_ASAN"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"leak\")",
                                                    "new_reachability": "['WITH_ASAN_LEAK']",
                                                    "actor_id": "942",
                                                    "new_related_options": "WITH_ASAN_LEAK"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"thread\")",
                                                    "new_reachability": "['WITH_TSAN']",
                                                    "actor_id": "945",
                                                    "new_related_options": "WITH_TSAN"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"undefined_behavior\")",
                                                    "new_reachability": "['WITH_UBSAN']",
                                                    "actor_id": "948",
                                                    "new_related_options": "WITH_UBSAN"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "nl_FOUND": {
                                "new_option_name": "nl_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(nl REQUIRED genl)",
                                        "new_reachability": "['WITH_RBD', 'LINUX']",
                                        "actor_id": "3955",
                                        "new_related_options": "WITH_RBD LINUX"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_RBD": {
                                            "new_option_name": "WITH_RBD",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "269",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        },
                                        "LINUX": {
                                            "new_option_name": "LINUX",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(LINUX ON)",
                                                    "new_reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
                                                    "actor_id": "15",
                                                    "new_related_options": "CMAKE_SYSTEM_NAME MATCHES"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]",
                                                    "actor_id": "669",
                                                    "new_related_options": ""
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                                                    "actor_id": "687",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                                                    "actor_id": "690",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                                                    "actor_id": "695",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {}
                    ]
                }
            }
        },
        {
            "option_name": "Sanitizers_leak_COMPILE_OPTIONS",
            "option_code": "set(Sanitizers_leak_COMPILE_OPTIONS \"-fsanitize=leak\")",
            "reachability": "['NOT (component STREQUAL \"address\")', 'component STREQUAL \"leak\"']",
            "actor_id": "24542",
            "new_related_options": "component ",
            "indirect_options": {
                "component": {
                    "new_option_name": "component",
                    "new_option_code_reachabilities": [
                        {
                            "new_option_code": "foreach(component ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "12112",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(pmdk_${component}_LIBRARY NAMES ${component} HINTS ${PKG_${component}_LIBRARY_DIRS})",
                            "new_reachability": "[]",
                            "actor_id": "12121",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component pmem ${pmdk_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['pmdk_FOUND']",
                            "actor_id": "12129",
                            "new_related_options": "pmdk_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24062",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component IN LISTS _Boost_FIND_LIBRARY_HINTS_FOR_COMPONENT_NAME COMPONENT)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24136",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "string(TOLOWER \"${component}\" component)",
                            "new_reachability": "['NOT Boost_NO_BOOST_CMAKE', 'Boost_FOUND', 'Boost_${comp}_FOUND']",
                            "actor_id": "22316",
                            "new_related_options": "Boost_NO_BOOST_CMAKE Boost_FOUND Boost_${comp}_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component ${_boost_unprocessed_components})...MASKED_CONTENT...",
                            "new_reachability": "['_boost_unprocessed_components']",
                            "actor_id": "23507",
                            "new_related_options": "_boost_unprocessed_components"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['_boost_unprocessed_components', 'component MATCHES \"^(python|mpi_python|numpy)([0-9][0-9]?|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']",
                            "actor_id": "23512",
                            "new_related_options": "_boost_unprocessed_components component MATCHES"
                        },
                        {
                            "new_option_code": "set(component \"${CMAKE_MATCH_1}\")",
                            "new_reachability": "['component MATCHES \"^(python|mpi_python|numpy)([0-9]+|[0-9]\\\\\\\\.[0-9]+)\\\\$\"']",
                            "actor_id": "23990",
                            "new_related_options": "component MATCHES"
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24538",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${Sanitizers_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['Sanitizers_FOUND']",
                            "actor_id": "24573",
                            "new_related_options": "Sanitizers_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24832",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-3)",
                            "new_reachability": "['component STREQUAL \"core\"']",
                            "actor_id": "24838",
                            "new_related_options": "component STREQUAL"
                        },
                        {
                            "new_option_code": "find_library(nl_${component}_LIBRARY nl-${component}-3)",
                            "new_reachability": "['NOT (component STREQUAL \"core\")', '']",
                            "actor_id": "24840",
                            "new_related_options": "component STREQUAL"
                        },
                        {
                            "new_option_code": "foreach(component \"core\" ${nl_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['nl_FOUND']",
                            "actor_id": "24846",
                            "new_related_options": "nl_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24896",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${gperftools_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FIND_COMPONENTS']",
                            "actor_id": "24902",
                            "new_related_options": "gperftools_FIND_COMPONENTS"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal profiler)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']",
                            "actor_id": "24911",
                            "new_related_options": "gperftools_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component tcmalloc tcmalloc_minimal)...MASKED_CONTENT...",
                            "new_reachability": "['gperftools_FOUND']",
                            "actor_id": "24916",
                            "new_related_options": "gperftools_FOUND"
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24983",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "find_library(QatDrv_${component}_LIBRARIES NAMES ${component} HINTS ${QATDRV_INCLUDE_DIR}/build/)",
                            "new_reachability": "[]",
                            "actor_id": "24984",
                            "new_related_options": ""
                        },
                        {
                            "new_option_code": "foreach(component ${QatDrv_FIND_COMPONENTS})...MASKED_CONTENT...",
                            "new_reachability": "[]",
                            "actor_id": "24990",
                            "new_related_options": ""
                        }
                    ],
                    "new_indirect_options": [
                        {},
                        {},
                        {
                            "pmdk_FOUND": {
                                "new_option_name": "pmdk_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(pmdk 1.8 REQUIRED COMPONENTS ${pmdk_COMPONENTS})",
                                        "new_reachability": "['WITH_BLUESTORE_PMEM OR WITH_RBD_RWL', 'WITH_SYSTEM_PMDK']",
                                        "actor_id": "2302",
                                        "new_related_options": "WITH_BLUESTORE_PMEM WITH_RBD_RWL WITH_SYSTEM_PMDK"
                                    }
                                ],
                                "new_indirect_options": [
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "Boost_FOUND": {
                                "new_option_name": "Boost_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Boost 1.85 COMPONENTS ${BOOST_COMPONENTS} REQUIRED)",
                                        "new_reachability": "['WITH_SYSTEM_BOOST']",
                                        "actor_id": "978",
                                        "new_related_options": "WITH_SYSTEM_BOOST"
                                    },
                                    {
                                        "new_option_code": "find_package(Boost QUIET NO_MODULE ${_boost_FIND_PACKAGE_ARGS})",
                                        "new_reachability": "['NOT Boost_NO_BOOST_CMAKE']",
                                        "actor_id": "22210",
                                        "new_related_options": "Boost_NO_BOOST_CMAKE"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_SYSTEM_BOOST": {
                                            "new_option_name": "WITH_SYSTEM_BOOST",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_SYSTEM_BOOST \"require and build with system Boost\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "960",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    },
                                    {}
                                ]
                            }
                        },
                        {
                            "_boost_unprocessed_components": {
                                "new_option_name": "_boost_unprocessed_components",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "list(APPEND _boost_unprocessed_components ${${componentvar}})",
                                        "new_reachability": "[]",
                                        "actor_id": "23504",
                                        "new_related_options": ""
                                    },
                                    {
                                        "new_option_code": "set(_boost_unprocessed_components ${_boost_new_components})",
                                        "new_reachability": "['_boost_unprocessed_components']",
                                        "actor_id": "23927",
                                        "new_related_options": "_boost_unprocessed_components"
                                    }
                                ],
                                "new_indirect_options": [
                                    {},
                                    {}
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "Sanitizers_FOUND": {
                                "new_option_name": "Sanitizers_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(Sanitizers REQUIRED ${sanitizers})",
                                        "new_reachability": "['sanitizers']",
                                        "actor_id": "950",
                                        "new_related_options": "sanitizers"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "sanitizers": {
                                            "new_option_name": "sanitizers",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"address\")",
                                                    "new_reachability": "['WITH_ASAN']",
                                                    "actor_id": "939",
                                                    "new_related_options": "WITH_ASAN"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"leak\")",
                                                    "new_reachability": "['WITH_ASAN_LEAK']",
                                                    "actor_id": "942",
                                                    "new_related_options": "WITH_ASAN_LEAK"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"thread\")",
                                                    "new_reachability": "['WITH_TSAN']",
                                                    "actor_id": "945",
                                                    "new_related_options": "WITH_TSAN"
                                                },
                                                {
                                                    "new_option_code": "list(APPEND sanitizers \"undefined_behavior\")",
                                                    "new_reachability": "['WITH_UBSAN']",
                                                    "actor_id": "948",
                                                    "new_related_options": "WITH_UBSAN"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {
                            "nl_FOUND": {
                                "new_option_name": "nl_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(nl REQUIRED genl)",
                                        "new_reachability": "['WITH_RBD', 'LINUX']",
                                        "actor_id": "3955",
                                        "new_related_options": "WITH_RBD LINUX"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "WITH_RBD": {
                                            "new_option_name": "WITH_RBD",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_RBD \"Enable RADOS Block Device related targets\" ON)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "269",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        },
                                        "LINUX": {
                                            "new_option_name": "LINUX",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(LINUX ON)",
                                                    "new_reachability": "['CMAKE_SYSTEM_NAME MATCHES \"Linux\"']",
                                                    "actor_id": "15",
                                                    "new_related_options": "CMAKE_SYSTEM_NAME MATCHES"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {
                            "gperftools_FOUND": {
                                "new_option_name": "gperftools_FOUND",
                                "new_option_code_reachabilities": [
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED)",
                                        "new_reachability": "['ALLOCATOR', '${ALLOCATOR} MATCHES \"tcmalloc(_minimal)?\"']",
                                        "actor_id": "672",
                                        "new_related_options": "ALLOCATOR ${ALLOCATOR} MATCHES"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2)",
                                        "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR']",
                                        "actor_id": "682",
                                        "new_related_options": "ALLOCATOR"
                                    },
                                    {
                                        "new_option_code": "find_package(gperftools 2.6.2 REQUIRED profiler)",
                                        "new_reachability": "['WITH_PROFILER']",
                                        "actor_id": "2666",
                                        "new_related_options": "WITH_PROFILER"
                                    }
                                ],
                                "new_indirect_options": [
                                    {
                                        "ALLOCATOR": {
                                            "new_option_name": "ALLOCATOR",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"\" CACHE STRING \"specify memory allocator to use. currently tcmalloc, tcmalloc_minimal,\\jemalloc, and libc is supported. if not specified, will try to find tcmalloc,\\and then jemalloc. If neither of then is found. use the one in libc.\")",
                                                    "new_reachability": "[]",
                                                    "actor_id": "669",
                                                    "new_related_options": ""
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR tcmalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'gperftools_FOUND']",
                                                    "actor_id": "687",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR jemalloc)",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'JeMalloc_FOUND']",
                                                    "actor_id": "690",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                                                },
                                                {
                                                    "new_option_code": "set(ALLOCATOR \"libc\")",
                                                    "new_reachability": "['NOT (ALLOCATOR)', 'ALLOCATOR', 'NOT (gperftools_FOUND)', 'NOT (JeMalloc_FOUND)', '']",
                                                    "actor_id": "695",
                                                    "new_related_options": "ALLOCATOR gperftools_FOUND JeMalloc_FOUND"
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {},
                                                {},
                                                {},
                                                {}
                                            ]
                                        }
                                    },
                                    {},
                                    {
                                        "WITH_PROFILER": {
                                            "new_option_name": "WITH_PROFILER",
                                            "new_option_code_reachabilities": [
                                                {
                                                    "new_option_code": "option(WITH_PROFILER \"build extra profiler binaries\" OFF)",
                                                    "new_reachability": "[]",
                                                    "actor_id": "2664",
                                                    "new_related_options": ""
                                                }
                                            ],
                                            "new_indirect_options": [
                                                {}
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {},
                        {},
                        {},
                        {}
                    ]
                }
            }
        }
    ],
    "Backtrace_LIBRARY": [
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        },
        {
            "option_name": "Backtrace_INCLUDE_DIR",
            "option_code": null,
            "reachability": null,
            "actor_id": null,
            "new_related_options": "",
            "indirect_options": {}
        }
    ]
}